
Current goal:
- Fine-tune the performance of my state machine!
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NEXT SUB-GOALS:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// TODO -- add all global variables to structs -- this allows you to pad them to cache align, categorize, etc.
// HOW? Actually declare (and initialize) the structs only once, in initializer.c. Do not use "extern."
// In the header file, declare the struct with "extern".
// Anywhere that the struct is used, include the header file. This will tell the compiler that the struct is
// external of the file, and it will find it where it is actually declared.

// "__declspec" used to cache align things within a struct to avoid cache contention!
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
What do we tackle next???

- FIRST ORDER OF BUSINESS: clean up. Resolve TODOs. Add functions. Tidy up code. Create README.
    - Add structs
    - Declare & initialize with extern properly
    - Make the list operations cleaner -- incrementing/decrementing counts and list sizes should be simpler.

- List operations. Use read/write locks to speed things up. Batch prune to multiple free lists.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
THEN, any of the below:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Lock contention. Move to PTE region locks, not individual PTE locks.
    - Try removing locks from as many places as possible.

- More elegantly schedule trimming/writing batch sizes based on anticipated consumption
    - Use QueryPerformanceCounter(&modified_list);

- Cache-optimize structs to reduce contention.

- Add read/write accesses. Check readwrite bit in trimmer -- move read-only directly to standby.

- Add aging via accessed bit. Use this in the trimmer to trim the right candidates.
    - Then, add in non-random user accessing. Read in from disk more generously.

- De-fragment the bitmaps from time to time.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~ LOCK ORDERS ~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A - PTE locks
B - PFN locks
C - list locks
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~ OLD THOUGHTS THAT ARE SEEMINGLY IRRELEVANT ~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

PAGE = 4k chunk of virtual memory
FRAME = 4k chunk of physical memory

- Implement PTE and PFN data structures:
    - Create PFN and PTE structs (DONE)
    - Create Page Table - 1-to-1 maps from 4k of VA space to each PTE (DONE)
    - Create page file (malloc to hold data written out to "disk") (DONE)

Bootup:
    - Create PFN_Array - mem reserve with virtual alloc (DONE)
    - call mem commit to allocate space for each physical page (DONE)
    - add all pages to free list (DONE)
    - initialize other list heads (DONE)
    - initialize page table (malloc) (DONE)
    - initialize page file (malloc) (DONE)


 First attempt:
 - No aging
 - Trim from active list from list head
 - unmap PTE
 - Write out to disk
 - update PTE
 - modify PFN
 - then serve page up to faulting VA


 What to do when we get a page fault?
 1. Grab the PTE for that VA (done)
 2. If the PTE is in disk format, then we know we need to load its contents from the disk. (NOT DONE)
 3. If the PTE is in transition, then (not yet possible, do not think about this yet)
 4. If the PTE is zeroed, then there is nothing to be done. (done)

 5. Get a page of memory by...
 6. First trying to get a page from the free list. If you can, great! Return the first PFN on the free list. (done)
 7. If the free list is empty, trim the first page from the active list: (done)

 - Unmap the old PTE to this page -- put it into disk format
 - Write the page out to the disk, saving its disk index
 - Add the disk index to the old PTE
 - Update the PFN's PTE to the new PTE

 K. Set the PTE into its memory format. Set the valid bit to 1 and save the frame_number. (done)
 L. Set the PFN to its active state and add it to the active list. (done)
 M. Call MapUserPhysicalPages() to make the connection. (done)

 Z. Read/write to the VA - no page fault this time!

