July 22

Known bugs:
1. Validate page can return false. For a disk-format PTE, I occasionally return a page with an
invalid stamp. Why? In one case, there is only ONE stamp at all. If it is disk-format,
there should be at least one good stamp. Did I return the wrong page?

In another case, I have two valid stamps and one invalid stamp...


July 21

Debugger is triggered when waiting on kernel_read_lock.
This happens when all threads are waiting on the same pte (for some reason) at the very beginning
of the code. I suppose they all grab the same random VA, as they begin simultaneously.

The lock appears to be uninitialized in the debugger. Could it be that it hasn't finished intitializing
when the other threads are instantiated?

Something to consider: maybe I am not properly re-initializing the system between tests.
Things seem to be fine when I run one test at a time.


ALSO -- I may be hitting the same bug Noah hit with the TLB clear? Check that out, too.

July 19

I removed the scheduler. As a result, the code is orders of magnitude faster.
However, I seem to have new race conditions to address.
Right now, I have an issue with the ability to map PTEs when resolving soft faults.
For some reason, it seems that when one thread is waiting on a PTE and the other thread
is mapping the PTE, there is an error.
Why would this even be possible?

Okay, so the error even happens with just ONE user thread. So this is clearly a race condition
with the writer/trimmer threads.

writer PFN:
0x0000017b`2dbed5b0
PFN's PTE:
0x0000017b`7b119200

soft fault PFN:
0x0000017b`2dbed5b0

This is strange.
The PFN is given from the PTE.
But the PFN's PTE has changed...
How is this possible?

Possible explanation: we are trying to map a frame that is already mapped in another thread.
Solution: if a page is being mapped by the writer, don't let it be mapped by another thread....


User thread waiting to lock pfn:
0x00000235`41d49630
which is resolving a soft fault on PTE 0x00000235`12117c70

User thread waiting to lock PTE:
0x00000235`12117c70

Writer looking for a disk slot for PFN 0x00000235`41d49630

*** right now, the writer is moving forward without a locked disk slot! We need to GUARANTEE there
is an available disk slot before it tries to write. OR if there are none, we need to cancel the write.

Solution: check for available disk slots while batching the write.

July 12


*** Determine why my standby page for final thread is not being taken -- last thread is
not waking up from the standby page ready event!